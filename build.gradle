plugins {
    id "io.kestra.gradle.inject-bom-versions" version "1.0.0"
    id 'java-library'
    id "idea"
    id 'jacoco'
    id "com.adarshr.test-logger" version "4.0.0"
    id "com.gradleup.shadow" version "8.3.8"
    id 'signing'
    id "com.github.ben-manes.versions" version "0.52.0"
    id 'net.researchgate.release' version '3.1.0'
    id 'maven-publish'
}

def isBuildSnapshot = version.toString().endsWith("-SNAPSHOT")

repositories {
    mavenLocal()
    mavenCentral()
    if (isBuildSnapshot) {
        maven { url "https://central.sonatype.com/repository/maven-snapshots/" }
    }
}

final targetJavaVersion = JavaVersion.VERSION_21

java {
    sourceCompatibility = targetJavaVersion
    targetCompatibility = targetJavaVersion
    withSourcesJar()
    withJavadocJar()
}

group = "io.github.agrawal-yash" 
description = 'Plugin FSS IMAP for Kestra'

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.compilerArgs.add("-parameters")
}

dependencies {
    // Platform
    annotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    implementation enforcedPlatform("io.kestra:platform:$kestraVersion")
    api enforcedPlatform("io.kestra:platform:$kestraVersion")

    // lombok
    annotationProcessor "org.projectlombok:lombok"
    compileOnly "org.projectlombok:lombok"

    // kestra
    annotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
    compileOnly group: "io.kestra", name: "core", version: kestraVersion
    compileOnly group: "io.kestra", name: "script", version: kestraVersion

    implementation group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    
    // JavaMail API for IMAP support
    implementation 'com.sun.mail:jakarta.mail:2.0.1'
    implementation 'jakarta.mail:jakarta.mail-api:2.1.2'
    
}


/**********************************************************************************************************************\
 * Test
 **********************************************************************************************************************/
test {
    useJUnitPlatform()
}

testlogger {
    theme = "mocha-parallel"
    showExceptions = true
    showFullStackTraces = true
    showStandardStreams = true
    showPassedStandardStreams = false
    showSkippedStandardStreams = true
}

dependencies {
    // Platform
    testAnnotationProcessor enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")

    // lombok
    testAnnotationProcessor "org.projectlombok:lombok"
    testCompileOnly 'org.projectlombok:lombok'

    // micronaut
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testAnnotationProcessor "io.micronaut.validation:micronaut-validation-processor"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testImplementation "io.micronaut:micronaut-jackson-databind"

    // test deps needed only for to have a runner
    testAnnotationProcessor group: "io.kestra", name: "processor", version: kestraVersion
    testImplementation group: "io.kestra", name: "core", version: kestraVersion
    testImplementation group: "io.kestra", name: "tests", version: kestraVersion
    testImplementation group: "io.kestra", name: "script", version: kestraVersion
    testImplementation group: "io.kestra", name: "repository-memory", version: kestraVersion
    testImplementation group: "io.kestra", name: "runner-memory", version: kestraVersion
    testImplementation group: "io.kestra", name: "storage-local", version: kestraVersion

    // test
    testImplementation "org.junit.jupiter:junit-jupiter-engine"
    testImplementation "org.hamcrest:hamcrest"
    testImplementation "org.hamcrest:hamcrest-library"
}

/**********************************************************************************************************************\
 * Allure Reports
 **********************************************************************************************************************/
dependencies {
    testImplementation enforcedPlatform("io.kestra:platform:$kestraVersion")
    testImplementation "io.qameta.allure:allure-junit5"
}

configurations {
    agent {
        canBeResolved = true
        canBeConsumed = true
    }
}

dependencies {
    agent "org.aspectj:aspectjweaver:1.9.24"
}

test {
    jvmArgs = [ "-javaagent:${configurations.agent.singleFile}" ]
}

/**********************************************************************************************************************\
 * Jacoco
 **********************************************************************************************************************/
test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
}

/**********************************************************************************************************************\
 * Publish to GitHub Packages
 **********************************************************************************************************************/
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/agrawal-yash/kestra-plugin"
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN") ?: ""
            }
        }
    }
    publications {
        maven(MavenPublication) {
            from components.java
            
            pom {
                name = "${project.name}"
                description = "${project.description}"
                url = "https://github.com/agrawal-yash/kestra-plugin"
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'agrawal-yash'
                        name = 'Yash Agrawal'
                        email = 'your.email@example.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/agrawal-yash/kestra-plugin.git'
                    developerConnection = 'scm:git:ssh://github.com:agrawal-yash/kestra-plugin.git'
                    url = 'https://github.com/agrawal-yash/kestra-plugin'
                }
            }
        }
    }
}

// Only configure GitHub Packages repository if credentials are available
tasks.withType(PublishToMavenRepository) {
    doFirst {
        def username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
        def password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
        
        if (!username || !password) {
            throw new GradleException("GitHub credentials not found. Set GITHUB_ACTOR and GITHUB_TOKEN environment variables or use -Pgpr.user and -Pgpr.key properties.")
        }
    }
}

tasks.withType(GenerateModuleMetadata).configureEach {
    // Suppression this validation error as we want to enforce the Kestra platform
    suppressedValidationErrors.add('enforced-platform')
}

jar {
    manifest {
        attributes(
                "X-Kestra-Name": project.name,
                "X-Kestra-Title": "IMAP",
                "X-Kestra-Group": project.group + ".imap",
                "X-Kestra-Description": project.description,
                "X-Kestra-Version": project.version
        )
    }
}

shadowJar {
    archiveClassifier.set(null)
    mergeServiceFiles()
}

/**********************************************************************************************************************\
 * Version
 **********************************************************************************************************************/
release {
    preCommitText = 'chore(version):'
    preTagCommitMessage = 'update to version'
    tagCommitMessage = 'tag version'
    newVersionCommitMessage = 'update snapshot version'
    tagTemplate = 'v${version}'
    buildTasks = ['classes']
    git {
        requireBranch.set('master')
    }
}

/**********************************************************************************************************************\
 * Dev
 **********************************************************************************************************************/
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}
